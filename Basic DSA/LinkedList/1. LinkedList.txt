What is a Linked List?
A Linked List is a linear data structure which looks like a chain of nodes, where each node is a different element. 
Unlike Arrays, Linked List elements are not stored at a contiguous location.

It is basically chains of nodes, each node contains information such as data and a pointer to the next node in the chain. 
In the linked list there is a head pointer, which points to the first element of the linked list, and if the list is empty 
then it simply points to null or nothing.


## Why linked list data structure needed?
Here are a few advantages of a linked list that is listed below, it will help you understand why it is necessary to know.

1) Dynamic Data structure: The size of memory can be allocated or de-allocated at run time based on the operation insertion or deletion.
2) Ease of Insertion/Deletion: The insertion and deletion of elements are simpler than arrays since no elements need to be shifted after 
   insertion and deletion, Just the address needed to be updated.
3) Efficient Memory Utilization: As we know Linked List is a dynamic data structure the size increases or decreases as per the requirement 
   so this avoids the wastage of memory. 
4) Implementation: Various advanced data structures can be implemented using a linked list like a stack, queue, graph, hash maps, etc.


TYPES OF LINKED LISTS:
There are mainly three types of linked lists:
1) Single-linked list : Traversal of items can be done in the forward direction only due to the linking of every node to its next node.
2) Double linked list : Traversal of items can be done in both forward and backward directions as every node contains an additional prev 
   pointer that points to the previous node.
3) Circular linked list : A circular linked list is a type of linked list in which the first and the last nodes are also connected to each 
   other to form a circle, there is no NULL at the end. 

